import {
  Position
} from "./chunk-JBXV4EEP.js";
import "./chunk-MCKPQK6D.js";
import {
  CodeMirror
} from "./chunk-UVPMXJ6J.js";
import {
  getAutocompleteSuggestions
} from "./chunk-CV6SMSK3.js";
import "./chunk-RMYGERCM.js";
import {
  require_react_dom
} from "./chunk-62EBW2QD.js";
import {
  require_react
} from "./chunk-KJ3DELDC.js";
import {
  __toESM
} from "./chunk-OZI5HTJH.js";

// node_modules/@graphiql/react/dist/hint.es.js
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
CodeMirror.registerHelper("hint", "graphql", (editor, options) => {
  const { schema, externalFragments } = options;
  if (!schema) {
    return;
  }
  const cur = editor.getCursor();
  const token = editor.getTokenAt(cur);
  const tokenStart = token.type !== null && /"|\w/.test(token.string[0]) ? token.start : token.end;
  const position = new Position(cur.line, tokenStart);
  const rawResults = getAutocompleteSuggestions(schema, editor.getValue(), position, token, externalFragments);
  const results = {
    list: rawResults.map((item) => ({
      text: item.label,
      type: item.type,
      description: item.documentation,
      isDeprecated: item.isDeprecated,
      deprecationReason: item.deprecationReason
    })),
    from: { line: cur.line, ch: tokenStart },
    to: { line: cur.line, ch: token.end }
  };
  if ((results === null || results === void 0 ? void 0 : results.list) && results.list.length > 0) {
    results.from = CodeMirror.Pos(results.from.line, results.from.ch);
    results.to = CodeMirror.Pos(results.to.line, results.to.ch);
    CodeMirror.signal(editor, "hasCompletion", editor, results, token);
  }
  return results;
});
//# sourceMappingURL=hint.es-7THWYAO3.js.map
